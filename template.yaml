AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template for WSO2 Products'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Cluster Configuration
        Parameters:
          - AWSAccessKeyId
          - AWSAccessKeySecret
          - KeyPairName
      - Label:
          default: Network Configuration
        Parameters:
          - CertificateName
      - Label:
          default: Database Configuration
        Parameters:
          - DBUsername
          - DBPassword
    ParameterLabels:
      AWSAccessKeyId:
        default: AWS Access Key ID
      AWSAccessKeySecret:
        default: AWS Access Secret Key
      CertificateName:
        default: Which certificate should be used at the Load Balancer
      DBUsername:
        default: Database Master username
      DBPassword:
        default: Database Master password
Parameters:
  WSO2Username:
    Description: The WSO2 username.
    Type: String
    AllowedPattern: '[A-Za-z0-9\-]+'
  WSO2Password:
    Description: The WSO2 user password
    Type: String
    MinLength: 8
    NoEcho: true
    AllowedPattern: '[A-Za-z0-9\-]+'
  AMI:
    Type: String
    Default: READ_FROM_REGIONMAP
    Description: AMI of the region. Keep READ_FROM_REGIONMAP to map Ubuntu AMI from the RegionMap in the script.
  AWSAccessKeyId:
    Description: >-
      The AWS Access Key ID used for internal AWS CLI request calls
    Type: String
  AWSAccessKeySecret:
    Description: >-
      The AWS Access Key Secret for internal AWS CLI request calls
    Type: String
  KeyPairName:
    Description: >-
      The key pair to establish a SSH connection to the web servers. This should
      be already created.
    Type: 'AWS::EC2::KeyPair::KeyName'
  CertificateName:
    Description: A previously uploaded certificate to use at the Load Balancer Listeners.
    Type: String
    MinLength: 1
  DBUsername:
    Description: The username to be used in the WSO2 DB.
    Type: String
    Default: root
    MinLength: 4
    AllowedPattern: '[A-Za-z0-9\-]+'
  DBPassword:
    Description: The password to be used in the WSO2 DB.
    Type: String
    Default: wso2carbon
    MinLength: 8
    NoEcho: true
Resources:
#VPC Creation
  WSO2VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
#Public Subnets
  WSO2PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WSO2VPC
      CidrBlock: 10.0.254.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  WSO2PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WSO2VPC
      CidrBlock: 10.0.252.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
  WSO2PublicInternetGateway:
    Type: AWS::EC2::InternetGateway
  WSO2PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WSO2VPC
  WSO2PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WSO2PublicRouteTable
      SubnetId: !Ref WSO2PublicSubnet1
  WSO2PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WSO2PublicRouteTable
      SubnetId: !Ref WSO2PublicSubnet2
  WSO2PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WSO2PublicRouteTable
      GatewayId: !Ref WSO2PublicInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
    DependsOn: WSO2VPCInternetGatewayAttachment
  WSO2VPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref WSO2PublicInternetGateway
      VpcId: !Ref WSO2VPC
#Private Subnets
  WSO2PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WSO2VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  WSO2PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WSO2VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
  WSO2PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WSO2VPC
  WSO2PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref WSO2NATGateway
      RouteTableId: !Ref WSO2PrivateSubnetRouteTable
  WSO2PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WSO2PrivateSubnetRouteTable
      SubnetId: !Ref WSO2PrivateSubnet1
  WSO2PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WSO2PrivateSubnetRouteTable
      SubnetId: !Ref WSO2PrivateSubnet2
  WSO2NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt
        - WSO2EIP
        - AllocationId
      SubnetId: !Ref WSO2PublicSubnet1
  WSO2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
#RDS Instance
  WSO2DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 5
      AutoMinorVersionUpgrade: false
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t2.medium
      DBInstanceIdentifier: WSO2DBInstance
      DBSubnetGroupName: !Ref WSO2DBSubnetGroup
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref WSO2DBSecurityGroup
    DeletionPolicy: "Snapshot"
  WSO2DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS subnet group
      SubnetIds:
        - !Ref WSO2PrivateSubnet1
        - !Ref WSO2PrivateSubnet2
#Load Balancer
  WSO2ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      CrossZone: true
      SecurityGroups:
        - !Ref WSO2LBSecurityGroup
      Subnets:
        - !Ref WSO2PublicSubnet1
        - !Ref WSO2PublicSubnet2
      LBCookieStickinessPolicy:
        - PolicyName: LBStickyPolicy
      Listeners:
        - LoadBalancerPort: '9763'
          InstancePort: '9763'
          Protocol: HTTP
          InstanceProtocol: HTTP
          PolicyNames:
            - LBStickyPolicy
        - LoadBalancerPort: '9443'
          InstancePort: '9443'
          Protocol: HTTPS
          InstanceProtocol: HTTPS
          PolicyNames:
            - LBStickyPolicy
          SSLCertificateId: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':server-certificate'
              - /
              - !Ref CertificateName
        - LoadBalancerPort: '8243'
          InstancePort: '8243'
          Protocol: HTTPS
          InstanceProtocol: HTTPS
          PolicyNames:
            - LBStickyPolicy
          SSLCertificateId: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':server-certificate'
              - /
              - !Ref CertificateName
      HealthCheck:
          Target: 'TCP:9763'
          HealthyThreshold: '3'
          UnhealthyThreshold: '5'
          Interval: '10'
          Timeout: '5'
    DependsOn:
      - WSO2LBSecurityGroup
#Security Groups
#WSO2 Instance Security Group
  WSO2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for WSO2 EC2 compute instances
      VpcId: !Ref WSO2VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8140
        ToPort: 8140
        CidrIp: !GetAtt WSO2VPC.CidrBlock
      - IpProtocol: tcp
        FromPort: 9763
        ToPort: 9763
        SourceSecurityGroupId: !Ref WSO2LBSecurityGroup
      - IpProtocol: tcp
        FromPort: 9443
        ToPort: 9443
        SourceSecurityGroupId: !Ref WSO2LBSecurityGroup
#Load Balancer Securtiy Group
  WSO2LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref WSO2VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
#Database Security Group
  WSO2DBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for RDS
        VpcId: !Ref WSO2VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WSO2InstanceSecurityGroup
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref WSO2InstanceSecurityGroup
        - IpProtocol: tcp
          FromPort: 1433
          ToPort: 1433
          SourceSecurityGroupId: !Ref WSO2InstanceSecurityGroup
        - IpProtocol: tcp
          FromPort: 1521
          ToPort: 1521
          SourceSecurityGroupId: !Ref WSO2InstanceSecurityGroup
#WSO2 Instances
  WSO2Node1AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2Node1LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      LoadBalancerNames:
        - !Ref WSO2ApplicationLoadBalancer
      VPCZoneIdentifier:
        - !Ref WSO2PrivateSubnet1
      Tags:
        - Key: Name
          Value: WSO2Instance1
          PropagateAtLaunch: 'true'
    DependsOn:
      - WSO2ApplicationLoadBalancer
      - WSO2Node1LaunchConfiguration
  WSO2Node1LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2APIMAMIRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu140464bit
      InstanceType: t2.medium
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2InstanceSecurityGroup
      UserData: !Base64
        'Fn::Join':
          - |+

          - - '#!/bin/bash'
            - set -e
            - 'export PATH=~/.local/bin:$PATH'
            - mkdir -p ~/.aws
            - cat > ~/.aws/config << EOF
            - '[default]'
            - !Join
              - ''
              - - 'region = '
                - !Ref 'AWS::Region'
            - output = text
            - EOF
            - mkdir -p /mnt/efs
            - apt-get update
            - apt-get install -y nfs-common
            - !Sub "mount -t nfs4 -o nfsvers=4.1 ${WSO2APIMEFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs"
            - !Join
              - ''
              - - sed -i "s/CF_ELB_DNS_NAME/
                - !GetAtt
                  - WSO2ApplicationLoadBalancer
                  - DNSName
                - >-
                  /g"
                  /etc/puppet/hieradata/dev/wso2/wso2am_runtime/pattern-2/default.yaml
            - !Join
              - ''
              - - sed -i "s/CF_APIM_IP/
                - 'localhost'
                - >-
                  /g"
                  /etc/puppet/hieradata/dev/wso2/wso2am_runtime/pattern-2/default.yaml
            - apt-get install -y python3-pip
            - pip3 install boto3
            - !Sub "PRIVATE_IP=$(python3 /usr/local/bin/private_ip_extractor.py ${AWS::Region} ${AWSAccessKeyId} ${AWSAccessKeySecret} WSO2APIMAnalyticsInstance)"
            - !Join
              - ''
              - - sed -i "s/CF_ANALYTICS_IP/
                - $PRIVATE_IP
                - >-
                  /g"
                  /etc/puppet/hieradata/dev/wso2/wso2am_runtime/pattern-2/default.yaml
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /etc/puppet/hieradata/dev/wso2/common.yaml
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /etc/puppet/hieradata/dev/wso2/common.yaml
            - !Join
              - ''
              - - sed -i "s/CF_RDS_URL/
                - !GetAtt
                  - WSO2APIMDBInstance
                  - Endpoint.Address
                - /g" /etc/puppet/hieradata/dev/wso2/common.yaml
            - export DB_NAME=WSO2AM_DB
            - !Join
              - ''
              - - export DB_HOSTNAME=
                - !GetAtt
                  - WSO2APIMDBInstance
                  - Endpoint.Address
            - !Join
              - ''
              - - export DB_PORT=
                - !GetAtt
                  - WSO2APIMDBInstance
                  - Endpoint.Port
            - !Join
              - ''
              - - export DB_USERNAME=
                - !Ref DBUsername
            - !Join
              - ''
              - - export DB_PASSWORD=
                - !Ref DBPassword

            - echo "Waiting for Cluster lock..."
            - bash /usr/local/bin/acquire_lock.sh

            - export FACTER_product_name=wso2am_runtime
            - export FACTER_product_version=2.1.0
            - export FACTER_product_profile=default
            - export FACTER_vm_type=openstack
            - export FACTER_environment=dev
            - export FACTER_platform=default
            - export FACTER_use_hieradata=true
            - export FACTER_pattern=pattern-2
            - >-
              puppet apply -e "include wso2am_runtime"
              --modulepath=/etc/puppet/modules
              --hiera_config=/etc/puppet/hiera.yaml
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_HOST/
                - !GetAtt
                  - WSO2APIMDBInstance
                  - Endpoint.Address
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PORT/
                - !GetAtt
                  - WSO2APIMDBInstance
                  - Endpoint.Port
                - /g" /usr/local/bin/provision_db_apim.sh
            - bash /usr/local/bin/provision_db_apim.sh

            - echo "Releasing lock..."
            - /usr/local/bin/sync_lock apim unlock
            - 'if [ ! -d "/mnt/efs/synapse-configs" ]; then'
            - '    mkdir -p /mnt/efs/synapse-configs'
            - '    cp -r /mnt/wso2am-2.1.0/repository/deployment/server/synapse-configs /mnt/efs/synapse-configs'
            - fi
            - >-
              rm -rf
              /mnt/wso2am-2.1.0/repository/deployment/server/synapse-configs
            - >-
              ln -s /mnt/efs/synapse-configs/synapse-configs
              /mnt/wso2am-2.1.0/repository/deployment/server/synapse-configs

            - apt-get --purge remove puppet mysql-client -y
            - rm -rf /etc/puppet
            - /mnt/wso2am-2.1.0/bin/wso2server.sh start
            - echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
            - cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2InstanceSecurityGroup
      - WSO2ApplicationLoadBalancer
      - WSO2VPCInternetGatewayAttachment
Mappings:
  WSO2APIMAMIRegionMap:
    us-east-1:
      Ubuntu140464bit: ami-c0a02eba
    us-east-2:
      Ubuntu140464bit: ami-53113f36
    us-west-1:
      Ubuntu140464bit: ami-53281033
    us-west-2:
      Ubuntu140464bit: ami-6e05d716
  WSO2APIMAnalyticsAMIRegionMap:
    us-east-1:
      Ubuntu140464bit: ami-08be3072
    us-east-2:
      Ubuntu140464bit: ami-68efc10d
    us-west-1:
      Ubuntu140464bit: ami-b32911d3
    us-west-2:
      Ubuntu140464bit: ami-0904d671
Outputs:
  APIMServicePublisherURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2ApplicationLoadBalancer
          - DNSName
        - ':9443/publisher'
    Description: APIM service publisher URL
  APIMServiceStoreURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2ApplicationLoadBalancer
          - DNSName
        - ':9443/store'
    Description: APIM service store URL
